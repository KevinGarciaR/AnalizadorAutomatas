/* Generated By:JavaCC: Do not edit this line. lexerTokenManager.java */
package Analizador;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Dictionary;
import java.util.HashMap;

/** Token Manager. */
public class lexerTokenManager implements lexerConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xe40L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 0;
            return 39;
         }
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 0;
            return 8;
         }
         if ((active0 & 0x80000L) != 0L)
            return 23;
         if ((active0 & 0x2000L) != 0L)
            return 153;
         if ((active0 & 0x40000L) != 0L)
            return 154;
         return -1;
      case 1:
         if ((active0 & 0xe40L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
            return 39;
         }
         if ((active0 & 0x100L) != 0L)
            return 39;
         return -1;
      case 2:
         if ((active0 & 0xe40L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 2;
            return 39;
         }
         return -1;
      case 3:
         if ((active0 & 0x600L) != 0L)
            return 39;
         if ((active0 & 0x840L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 29;
               jjmatchedPos = 3;
            }
            return 39;
         }
         return -1;
      case 4:
         if ((active0 & 0x840L) != 0L)
            return 39;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 34:
         return jjStartNfaWithStates_0(0, 18, 154);
      case 40:
         return jjStartNfaWithStates_0(0, 13, 153);
      case 41:
         return jjStopAtPos(0, 14);
      case 42:
         return jjStopAtPos(0, 23);
      case 43:
         return jjStopAtPos(0, 21);
      case 45:
         return jjStopAtPos(0, 22);
      case 47:
         return jjStopAtPos(0, 24);
      case 59:
         return jjStopAtPos(0, 17);
      case 61:
         return jjStartNfaWithStates_0(0, 19, 23);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x600L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 123:
         return jjStopAtPos(0, 15);
      case 125:
         return jjStopAtPos(0, 16);
      default :
         return jjMoveNfa_0(6, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 39);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x640L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x600L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 39);
         break;
      case 115:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(6, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 153;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 153:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(88, 89);
                  else if (curChar == 40)
                     jjCheckNAddStates(0, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(77, 78);
                  else if (curChar == 40)
                     jjCheckNAddStates(3, 5);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  else if (curChar == 40)
                     jjCheckNAddStates(6, 8);
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 154:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  if (curChar == 34)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 27);
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  else if (curChar == 40)
                     jjCheckNAddStates(28, 36);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(37, 38);
                  else if (curChar == 33)
                     jjCheckNAdd(23);
                  else if (curChar == 61)
                     jjCheckNAdd(23);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(39);
                  }
                  else if (curChar == 62)
                     jjCheckNAdd(23);
                  else if (curChar == 60)
                     jjCheckNAdd(23);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                     jjCheckNAddStates(37, 49);
                  }
                  break;
               case 8:
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(39);
                  break;
               case 22:
                  if ((0x5000000000000000L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 23:
                  if (curChar == 61 && kind > 20)
                     kind = 20;
                  break;
               case 24:
                  if (curChar == 61)
                     jjCheckNAdd(23);
                  break;
               case 25:
                  if (curChar == 60)
                     jjCheckNAdd(23);
                  break;
               case 26:
                  if (curChar == 62)
                     jjCheckNAdd(23);
                  break;
               case 27:
                  if (curChar == 33)
                     jjCheckNAdd(23);
                  break;
               case 36:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 37:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 38:
                  if (curChar == 34 && kind > 28)
                     kind = 28;
                  break;
               case 40:
                  if (curChar == 40)
                     jjCheckNAddStates(28, 36);
                  break;
               case 41:
                  if (curChar == 40)
                     jjCheckNAddStates(6, 8);
                  break;
               case 42:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 43:
                  if ((0xac0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(50, 54);
                  break;
               case 44:
                  if (curChar != 41)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(55, 58);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 46:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(59, 61);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(62, 66);
                  break;
               case 49:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(67, 73);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(74, 81);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(82, 85);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(86, 93);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(94, 98);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(99, 102);
                  break;
               case 57:
                  if (curChar == 40)
                     jjCheckNAddStates(3, 5);
                  break;
               case 58:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 59:
                  if ((0xac0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(103, 106);
                  break;
               case 60:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(107, 110);
                  break;
               case 61:
                  if (curChar != 41)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(61, 62);
                  break;
               case 62:
                  if ((0xac0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(111, 114);
                  break;
               case 63:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(115, 118);
                  break;
               case 64:
                  if ((0xaf0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(62, 64);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(119, 124);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 67:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(125, 128);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(129, 134);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(135, 140);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 72:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(141, 144);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(145, 150);
                  break;
               case 75:
                  if ((0xac0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(151, 158);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(159, 163);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(77, 78);
                  break;
               case 78:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(164, 166);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(167, 171);
                  break;
               case 81:
                  if (curChar == 40)
                     jjCheckNAddStates(0, 2);
                  break;
               case 82:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 83:
                  if ((0xac0000000000L & l) != 0L)
                     jjCheckNAddStates(172, 175);
                  break;
               case 84:
                  if (curChar == 40)
                     jjCheckNAddStates(176, 179);
                  break;
               case 85:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(180, 182);
                  break;
               case 86:
                  if ((0xac0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(183, 187);
                  break;
               case 87:
                  if (curChar != 41)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(188, 191);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(88, 89);
                  break;
               case 89:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(192, 194);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(195, 199);
                  break;
               case 92:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(200, 206);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(207, 214);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(94, 95);
                  break;
               case 95:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(215, 218);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(219, 226);
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(227, 231);
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(232, 235);
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(236, 240);
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(101, 102);
                  break;
               case 102:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(241, 243);
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(244, 248);
                  break;
               case 105:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(249, 254);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(255, 262);
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(107, 108);
                  break;
               case 108:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(263, 266);
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(267, 274);
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(275, 278);
                  break;
               case 112:
                  if ((0xac0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(279, 287);
                  break;
               case 133:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(37, 49);
                  break;
               case 134:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(288, 290);
                  break;
               case 135:
                  if ((0xac0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(291, 293);
                  break;
               case 136:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(294, 298);
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(299, 304);
                  break;
               case 138:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(138, 139);
                  break;
               case 139:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 140:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(305, 307);
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(308, 312);
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(142, 143);
                  break;
               case 143:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(136, 145);
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(313, 318);
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(319, 323);
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(324, 327);
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAdd(148);
                  break;
               case 149:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 27);
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(150, 151);
                  break;
               case 151:
                  if (curChar == 46)
                     jjCheckNAdd(152);
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(152);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 154:
               case 37:
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 6:
                  if ((0x7fffffe80000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 112)
                     jjAddStates(328, 330);
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if ((0x7fffffe80000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 0:
                  if (curChar == 110 && kind > 7)
                     kind = 7;
                  break;
               case 1:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if (curChar == 116 && kind > 7)
                     kind = 7;
                  break;
               case 9:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 101 && kind > 7)
                     kind = 7;
                  break;
               case 11:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 103 && kind > 7)
                     kind = 7;
                  break;
               case 17:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 28:
                  if (curChar == 101 && kind > 26)
                     kind = 26;
                  break;
               case 29:
                  if (curChar == 115)
                     jjCheckNAdd(28);
                  break;
               case 30:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 117)
                     jjCheckNAdd(28);
                  break;
               case 34:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 39:
                  if ((0x7fffffe80000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(39);
                  break;
               case 113:
                  if (curChar == 112)
                     jjAddStates(328, 330);
                  break;
               case 114:
                  if (curChar == 101 && kind > 5)
                     kind = 5;
                  break;
               case 115:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 99 && kind > 5)
                     kind = 5;
                  break;
               case 121:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 100 && kind > 5)
                     kind = 5;
                  break;
               case 126:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 154:
               case 37:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 153 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   81, 82, 88, 57, 58, 77, 41, 42, 45, 82, 83, 98, 58, 59, 76, 42, 
   43, 55, 138, 139, 45, 46, 77, 78, 88, 89, 150, 151, 41, 42, 45, 57, 
   58, 77, 81, 82, 88, 134, 135, 42, 43, 58, 59, 82, 83, 148, 98, 76, 
   55, 146, 41, 43, 44, 49, 56, 41, 42, 45, 44, 42, 43, 48, 42, 45, 
   46, 43, 48, 41, 42, 43, 44, 49, 50, 55, 41, 45, 46, 51, 52, 44, 
   49, 50, 41, 44, 49, 54, 41, 45, 46, 51, 52, 44, 49, 54, 42, 45, 
   46, 43, 55, 45, 46, 51, 52, 60, 71, 61, 75, 60, 61, 62, 70, 62, 
   63, 66, 64, 62, 63, 64, 65, 62, 63, 66, 67, 64, 65, 62, 63, 64, 
   69, 62, 63, 66, 67, 64, 69, 60, 71, 72, 61, 62, 70, 60, 61, 62, 
   74, 60, 71, 72, 61, 62, 74, 60, 71, 61, 62, 63, 66, 64, 75, 58, 
   77, 78, 59, 76, 58, 59, 80, 58, 77, 78, 59, 80, 84, 105, 111, 112, 
   84, 85, 101, 86, 85, 86, 100, 81, 86, 87, 92, 99, 81, 82, 88, 87, 
   82, 83, 91, 82, 88, 89, 83, 91, 81, 82, 83, 87, 92, 93, 98, 81, 
   88, 89, 94, 95, 87, 92, 93, 81, 87, 92, 97, 81, 88, 89, 94, 95, 
   87, 92, 97, 82, 88, 89, 83, 98, 88, 89, 94, 95, 85, 101, 102, 86, 
   100, 85, 86, 104, 85, 101, 102, 86, 104, 84, 85, 86, 100, 105, 106, 107, 
   108, 84, 101, 102, 86, 105, 106, 84, 86, 105, 110, 107, 108, 84, 101, 102, 
   86, 105, 110, 107, 108, 101, 102, 81, 84, 86, 87, 92, 99, 105, 111, 112, 
   134, 135, 146, 135, 136, 147, 134, 135, 136, 137, 146, 138, 139, 142, 143, 136, 
   137, 134, 135, 141, 134, 138, 139, 135, 141, 138, 139, 142, 143, 136, 145, 134, 
   138, 139, 135, 146, 138, 139, 142, 143, 119, 124, 132, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\143\154\141\163\163", null, "\151\146", 
"\145\154\163\145", "\145\154\163\145\40\151\146", "\167\150\151\154\145", null, "\50", "\51", 
"\173", "\175", "\73", "\42", "\75", null, "\53", "\55", "\52", "\57", null, null, 
null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x3fffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[153];
static private final int[] jjstateSet = new int[306];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public lexerTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public lexerTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 153; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getBeginLine();
      beginColumn = endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 12;
   jjmatchedPos = -1;
   curPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static int[] jjemptyLineNo = new int[1];
static int[] jjemptyColNo = new int[1];
static boolean[] jjbeenHere = new boolean[1];
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 0 :
         break;
      case 5 :
         break;
      case 6 :
         break;
      case 7 :
         break;
      case 8 :
         break;
      case 9 :
         break;
      case 10 :
         break;
      case 11 :
         break;
      case 12 :
         if (jjmatchedPos == -1)
         {
            if (jjbeenHere[0] &&
                jjemptyLineNo[0] == input_stream.getBeginLine() &&
                jjemptyColNo[0] == input_stream.getBeginColumn())
               throw new TokenMgrError(("Error: Bailing out of infinite loop caused by repeated empty string matches at line " + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."), TokenMgrError.LOOP_DETECTED);
            jjemptyLineNo[0] = input_stream.getBeginLine();
            jjemptyColNo[0] = input_stream.getBeginColumn();
            jjbeenHere[0] = true;
         }
         break;
      case 13 :
         break;
      case 14 :
         break;
      case 15 :
         break;
      case 16 :
         break;
      case 17 :
         break;
      case 18 :
         break;
      case 19 :
         break;
      case 20 :
         break;
      case 21 :
         break;
      case 22 :
         break;
      case 23 :
         break;
      case 24 :
         break;
      case 25 :
         break;
      case 26 :
         break;
      case 27 :
         break;
      case 28 :
         break;
      case 29 :
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
