/* Generated By:JavaCC: Do not edit this line. lexerTokenManager.java */
package Analizador;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Dictionary;
import java.util.HashMap;
import java.util.ArrayList;

/** Token Manager. */
public class lexerTokenManager implements lexerConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xe40L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 0;
            return 214;
         }
         if ((active0 & 0x2000L) != 0L)
            return 215;
         if ((active0 & 0x1e00000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 0;
            return 216;
         }
         if ((active0 & 0x80000L) != 0L)
            return 39;
         if ((active0 & 0x40000L) != 0L)
            return 217;
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 0;
            return 8;
         }
         return -1;
      case 1:
         if ((active0 & 0xe40L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
            return 214;
         }
         if ((active0 & 0x100L) != 0L)
            return 214;
         return -1;
      case 2:
         if ((active0 & 0xe40L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 2;
            return 214;
         }
         return -1;
      case 3:
         if ((active0 & 0x840L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 29;
               jjmatchedPos = 3;
            }
            return 214;
         }
         if ((active0 & 0x600L) != 0L)
            return 214;
         return -1;
      case 4:
         if ((active0 & 0x840L) != 0L)
            return 214;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 34:
         return jjStartNfaWithStates_0(0, 18, 217);
      case 40:
         return jjStartNfaWithStates_0(0, 13, 215);
      case 41:
         return jjStopAtPos(0, 14);
      case 42:
         return jjStartNfaWithStates_0(0, 12, 216);
      case 43:
         return jjStartNfaWithStates_0(0, 12, 216);
      case 45:
         return jjStartNfaWithStates_0(0, 12, 216);
      case 47:
         return jjStartNfaWithStates_0(0, 12, 216);
      case 59:
         return jjStopAtPos(0, 17);
      case 61:
         return jjStartNfaWithStates_0(0, 19, 39);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x600L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 123:
         return jjStopAtPos(0, 15);
      case 125:
         return jjStopAtPos(0, 16);
      default :
         return jjMoveNfa_0(6, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 214);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x640L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x600L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 214);
         break;
      case 115:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 214);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(6, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 214;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 214:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(188);
                  }
                  else if ((0xac0000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAddStates(0, 3);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(4, 7);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(8, 11);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(188);
                  }
                  else if ((0xac0000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAddStates(0, 3);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(4, 7);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(8, 11);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 23);
                  else if ((0xac0000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAddStates(0, 3);
                  }
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  else if (curChar == 40)
                     jjCheckNAddStates(24, 38);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(53, 54);
                  else if (curChar == 33)
                     jjCheckNAdd(39);
                  else if (curChar == 61)
                     jjCheckNAdd(39);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAddStates(39, 43);
                  }
                  else if (curChar == 62)
                     jjCheckNAdd(39);
                  else if (curChar == 60)
                     jjCheckNAdd(39);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                     jjCheckNAddStates(44, 63);
                  }
                  break;
               case 215:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(163, 164);
                  else if (curChar == 40)
                     jjCheckNAddStates(64, 66);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(148, 149);
                  else if (curChar == 40)
                     jjCheckNAddStates(67, 69);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(103, 104);
                  else if (curChar == 40)
                     jjCheckNAddStates(70, 72);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  else if (curChar == 40)
                     jjCheckNAddStates(73, 75);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  else if (curChar == 40)
                     jjCheckNAddStates(76, 78);
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(79, 81);
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(82, 84);
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(85, 87);
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(88, 90);
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(91, 93);
                  break;
               case 217:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  if (curChar == 34)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  break;
               case 216:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAddStates(94, 100);
                  }
                  else if ((0xac0000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAddStates(0, 3);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(101, 104);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAddStates(105, 111);
                  }
                  break;
               case 22:
                  if ((0xac0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(0, 3);
                  break;
               case 23:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(105, 111);
                  break;
               case 24:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(8, 11);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(4, 7);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(112, 115);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(116, 121);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(122, 127);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(94, 100);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(101, 104);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(128, 131);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(132, 139);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(140, 147);
                  break;
               case 38:
                  if ((0x5000000000000000L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 39:
                  if (curChar == 61 && kind > 20)
                     kind = 20;
                  break;
               case 40:
                  if (curChar == 61)
                     jjCheckNAdd(39);
                  break;
               case 41:
                  if (curChar == 60)
                     jjCheckNAdd(39);
                  break;
               case 42:
                  if (curChar == 62)
                     jjCheckNAdd(39);
                  break;
               case 43:
                  if (curChar == 33)
                     jjCheckNAdd(39);
                  break;
               case 52:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 53:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if (curChar == 34 && kind > 28)
                     kind = 28;
                  break;
               case 55:
                  if (curChar == 40)
                     jjCheckNAddStates(24, 38);
                  break;
               case 56:
                  if (curChar == 40)
                     jjCheckNAddStates(76, 78);
                  break;
               case 57:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(91, 93);
                  break;
               case 58:
                  if ((0xac0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(148, 152);
                  break;
               case 59:
                  if (curChar != 41)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(153, 156);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 61:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(157, 159);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(160, 164);
                  break;
               case 64:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(165, 171);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(172, 179);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 67:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(180, 183);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(184, 191);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(192, 196);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(197, 200);
                  break;
               case 72:
                  if (curChar == 40)
                     jjCheckNAddStates(73, 75);
                  break;
               case 73:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(88, 90);
                  break;
               case 74:
                  if ((0xac0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(201, 204);
                  break;
               case 75:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(205, 208);
                  break;
               case 76:
                  if (curChar != 41)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(76, 77);
                  break;
               case 77:
                  if ((0xac0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(209, 212);
                  break;
               case 78:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(213, 216);
                  break;
               case 79:
                  if ((0xaf0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(77, 79);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(217, 222);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 82:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(223, 226);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(227, 232);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(233, 238);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(86, 87);
                  break;
               case 87:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(239, 242);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(243, 248);
                  break;
               case 90:
                  if ((0xac0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(249, 256);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(257, 261);
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  break;
               case 93:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(262, 264);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(265, 269);
                  break;
               case 96:
                  if (curChar == 40)
                     jjCheckNAddStates(70, 72);
                  break;
               case 97:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(85, 87);
                  break;
               case 98:
                  if ((0xac0000000000L & l) != 0L)
                     jjCheckNAddStates(270, 273);
                  break;
               case 99:
                  if (curChar == 40)
                     jjCheckNAddStates(274, 277);
                  break;
               case 100:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(278, 280);
                  break;
               case 101:
                  if ((0xac0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(281, 285);
                  break;
               case 102:
                  if (curChar != 41)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(286, 289);
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(103, 104);
                  break;
               case 104:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(290, 292);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(293, 297);
                  break;
               case 107:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(298, 304);
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(305, 312);
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(109, 110);
                  break;
               case 110:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(313, 316);
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(317, 324);
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(325, 329);
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(330, 333);
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(334, 338);
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(116, 117);
                  break;
               case 117:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(339, 341);
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(342, 346);
                  break;
               case 120:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(347, 352);
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(353, 360);
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(122, 123);
                  break;
               case 123:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(361, 364);
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(365, 372);
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(373, 376);
                  break;
               case 127:
                  if ((0xac0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(377, 385);
                  break;
               case 128:
                  if (curChar == 40)
                     jjCheckNAddStates(67, 69);
                  break;
               case 129:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(82, 84);
                  break;
               case 130:
                  if ((0xac0000000000L & l) != 0L)
                     jjCheckNAddStates(386, 389);
                  break;
               case 131:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(390, 393);
                  break;
               case 132:
                  if (curChar == 41)
                     jjCheckNAddTwoStates(132, 133);
                  break;
               case 133:
                  if ((0xac0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(394, 397);
                  break;
               case 134:
                  if ((0xaf0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(398, 400);
                  break;
               case 135:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(401, 403);
                  break;
               case 136:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(404, 408);
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(137, 138);
                  break;
               case 138:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(409, 411);
                  break;
               case 140:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(412, 416);
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(417, 422);
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(142, 143);
                  break;
               case 143:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(423, 426);
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(427, 432);
                  break;
               case 146:
                  if ((0xac0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(433, 440);
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(441, 445);
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(148, 149);
                  break;
               case 149:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(446, 448);
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(449, 453);
                  break;
               case 152:
                  if (curChar == 40)
                     jjCheckNAddStates(64, 66);
                  break;
               case 153:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(79, 81);
                  break;
               case 154:
                  if ((0xaf0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(454, 456);
                  break;
               case 155:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(457, 459);
                  break;
               case 156:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(460, 464);
                  break;
               case 157:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(157, 158);
                  break;
               case 158:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 159:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(465, 467);
                  break;
               case 160:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(468, 472);
                  break;
               case 161:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(473, 477);
                  break;
               case 162:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(478, 484);
                  break;
               case 163:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(163, 164);
                  break;
               case 164:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 165:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(485, 487);
                  break;
               case 166:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(488, 494);
                  break;
               case 187:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddStates(39, 43);
                  break;
               case 188:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(188);
                  break;
               case 189:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(44, 63);
                  break;
               case 190:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(495, 497);
                  break;
               case 191:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(495, 497);
                  break;
               case 192:
                  if ((0xac0000000000L & l) != 0L)
                     jjCheckNAddTwoStates(192, 193);
                  break;
               case 193:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(193, 194);
                  break;
               case 194:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(193, 194);
                  break;
               case 195:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(498, 500);
                  break;
               case 196:
                  if ((0xac0000000000L & l) != 0L)
                     jjCheckNAddStates(501, 504);
                  break;
               case 197:
                  if ((0xaf0000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(505, 507);
                  break;
               case 198:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(508, 510);
                  break;
               case 199:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(511, 515);
                  break;
               case 200:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(200, 201);
                  break;
               case 201:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 202:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(516, 518);
                  break;
               case 203:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(519, 523);
                  break;
               case 204:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(524, 528);
                  break;
               case 205:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(205, 206);
                  break;
               case 206:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 207:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(529, 531);
                  break;
               case 208:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(532, 536);
                  break;
               case 209:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAdd(209);
                  break;
               case 210:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 23);
                  break;
               case 211:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(211, 212);
                  break;
               case 212:
                  if (curChar == 46)
                     jjCheckNAdd(213);
                  break;
               case 213:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(213);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 214:
                  if ((0x7fffffe80000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(188);
                  }
                  if ((0x7fffffe80000000L & l) != 0L)
                     jjCheckNAddStates(4, 7);
                  break;
               case 8:
                  if ((0x7fffffe80000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(188);
                  }
                  if ((0x7fffffe80000000L & l) != 0L)
                     jjCheckNAddStates(4, 7);
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 6:
                  if ((0x7fffffe80000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAddStates(39, 43);
                  }
                  if (curChar == 112)
                     jjAddStates(537, 539);
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 47;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 217:
               case 53:
                  jjCheckNAddTwoStates(53, 54);
                  break;
               case 216:
               case 31:
                  if ((0x7fffffe80000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(94, 100);
                  break;
               case 0:
                  if (curChar == 110 && kind > 7)
                     kind = 7;
                  break;
               case 1:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if (curChar == 116 && kind > 7)
                     kind = 7;
                  break;
               case 9:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 101 && kind > 7)
                     kind = 7;
                  break;
               case 11:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 103 && kind > 7)
                     kind = 7;
                  break;
               case 17:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 25:
                  if ((0x7fffffe80000000L & l) != 0L)
                     jjCheckNAddStates(4, 7);
                  break;
               case 44:
                  if (curChar == 101 && kind > 26)
                     kind = 26;
                  break;
               case 45:
                  if (curChar == 115)
                     jjCheckNAdd(44);
                  break;
               case 46:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 117)
                     jjCheckNAdd(44);
                  break;
               case 50:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 167:
                  if (curChar == 112)
                     jjAddStates(537, 539);
                  break;
               case 168:
                  if (curChar == 101 && kind > 5)
                     kind = 5;
                  break;
               case 169:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if (curChar == 99 && kind > 5)
                     kind = 5;
                  break;
               case 175:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if (curChar == 100 && kind > 5)
                     kind = 5;
                  break;
               case 180:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if ((0x7fffffe80000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddStates(39, 43);
                  break;
               case 188:
                  if ((0x7fffffe80000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(188);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 217:
               case 53:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 214 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   22, 23, 32, 31, 24, 26, 25, 22, 24, 25, 22, 30, 26, 27, 60, 61, 
   92, 93, 103, 104, 205, 206, 211, 212, 56, 57, 60, 72, 73, 92, 96, 97, 
   103, 128, 129, 148, 152, 153, 163, 24, 26, 25, 22, 188, 24, 25, 22, 57, 
   58, 73, 74, 97, 98, 190, 191, 192, 195, 196, 209, 204, 113, 91, 70, 30, 
   152, 153, 163, 128, 129, 148, 96, 97, 103, 72, 73, 92, 56, 57, 60, 154, 
   161, 162, 129, 130, 147, 97, 98, 113, 73, 74, 91, 57, 58, 70, 24, 26, 
   25, 22, 23, 32, 31, 26, 27, 33, 34, 24, 25, 22, 23, 31, 37, 30, 
   24, 25, 22, 29, 24, 26, 27, 25, 22, 29, 24, 26, 27, 25, 22, 30, 
   22, 23, 36, 31, 26, 27, 22, 33, 34, 23, 31, 36, 26, 27, 22, 33, 
   34, 23, 31, 37, 56, 58, 59, 64, 71, 56, 57, 60, 59, 57, 58, 63, 
   57, 60, 61, 58, 63, 56, 57, 58, 59, 64, 65, 70, 56, 60, 61, 66, 
   67, 59, 64, 65, 56, 59, 64, 69, 56, 60, 61, 66, 67, 59, 64, 69, 
   57, 60, 61, 58, 70, 60, 61, 66, 67, 75, 86, 76, 90, 75, 76, 77, 
   85, 77, 78, 81, 79, 77, 78, 79, 80, 77, 78, 81, 82, 79, 80, 77, 
   78, 79, 84, 77, 78, 81, 82, 79, 84, 75, 86, 87, 76, 77, 85, 75, 
   76, 77, 89, 75, 86, 87, 76, 77, 89, 75, 86, 76, 77, 78, 81, 79, 
   90, 73, 92, 93, 74, 91, 73, 74, 95, 73, 92, 93, 74, 95, 99, 120, 
   126, 127, 99, 100, 116, 101, 100, 101, 115, 96, 101, 102, 107, 114, 96, 97, 
   103, 102, 97, 98, 106, 97, 103, 104, 98, 106, 96, 97, 98, 102, 107, 108, 
   113, 96, 103, 104, 109, 110, 102, 107, 108, 96, 102, 107, 112, 96, 103, 104, 
   109, 110, 102, 107, 112, 97, 103, 104, 98, 113, 103, 104, 109, 110, 100, 116, 
   117, 101, 115, 100, 101, 119, 100, 116, 117, 101, 119, 99, 100, 101, 115, 120, 
   121, 122, 123, 99, 116, 117, 101, 120, 121, 99, 101, 120, 125, 122, 123, 99, 
   116, 117, 101, 120, 125, 122, 123, 116, 117, 96, 99, 101, 102, 107, 114, 120, 
   126, 127, 131, 142, 132, 146, 131, 132, 133, 141, 133, 134, 135, 137, 134, 135, 
   137, 134, 135, 136, 134, 135, 137, 138, 136, 134, 135, 140, 134, 135, 137, 138, 
   140, 131, 142, 143, 132, 133, 141, 131, 132, 133, 145, 131, 142, 143, 132, 133, 
   145, 131, 142, 132, 133, 134, 135, 137, 146, 129, 148, 149, 130, 147, 129, 130, 
   151, 129, 148, 149, 130, 151, 154, 155, 157, 154, 155, 156, 154, 155, 157, 158, 
   156, 154, 155, 160, 154, 155, 157, 158, 160, 154, 155, 156, 161, 162, 163, 164, 
   154, 157, 158, 161, 162, 154, 161, 166, 163, 164, 154, 157, 158, 161, 166, 190, 
   191, 192, 195, 196, 204, 196, 197, 198, 200, 197, 198, 200, 197, 198, 199, 197, 
   198, 200, 201, 199, 197, 198, 203, 197, 198, 200, 201, 203, 195, 205, 206, 196, 
   204, 195, 196, 208, 195, 205, 206, 196, 208, 173, 178, 186, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\143\154\141\163\163", null, "\151\146", 
"\145\154\163\145", "\145\154\163\145\40\151\146", "\167\150\151\154\145", null, "\50", "\51", 
"\173", "\175", "\73", "\42", "\75", null, "\53", "\55", "\52", "\57", null, null, 
null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x3fffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[214];
static private final int[] jjstateSet = new int[428];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public lexerTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public lexerTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 214; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getBeginLine();
      beginColumn = endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 12;
   jjmatchedPos = -1;
   curPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static int[] jjemptyLineNo = new int[1];
static int[] jjemptyColNo = new int[1];
static boolean[] jjbeenHere = new boolean[1];
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 0 :
         break;
      case 5 :
         break;
      case 6 :
         break;
      case 7 :
         break;
      case 8 :
         break;
      case 9 :
         break;
      case 10 :
         break;
      case 11 :
         break;
      case 12 :
         if (jjmatchedPos == -1)
         {
            if (jjbeenHere[0] &&
                jjemptyLineNo[0] == input_stream.getBeginLine() &&
                jjemptyColNo[0] == input_stream.getBeginColumn())
               throw new TokenMgrError(("Error: Bailing out of infinite loop caused by repeated empty string matches at line " + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."), TokenMgrError.LOOP_DETECTED);
            jjemptyLineNo[0] = input_stream.getBeginLine();
            jjemptyColNo[0] = input_stream.getBeginColumn();
            jjbeenHere[0] = true;
         }
         break;
      case 13 :
         break;
      case 14 :
         break;
      case 15 :
         break;
      case 16 :
         break;
      case 17 :
         break;
      case 18 :
         break;
      case 19 :
         break;
      case 20 :
         break;
      case 21 :
         break;
      case 22 :
         break;
      case 23 :
         break;
      case 24 :
         break;
      case 25 :
         break;
      case 26 :
         break;
      case 27 :
         break;
      case 28 :
         break;
      case 29 :
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
