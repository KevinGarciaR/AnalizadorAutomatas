PARSER_BEGIN(lexer)
package Analizador;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Dictionary;
import java.util.HashMap;
class lexer
{
   // public static ArrayList<Identificador> Identificadores = new ArrayList<>();
   public static HashMap<String,Identificador> tablaSimbolos = new HashMap<String,Identificador>();
   Identificador identificadores;
	public static void main(String[] args) throws ParseException, FileNotFoundException
	{
		try
		{
		  
			lexer analizador=new lexer(new FileInputStream("C:\\Users\\Power\\eclipse-workspace\\ProyectoAutomatas\\src\\Analizador\\prueba.txt"));
			//analizador.Start();
			analizador.programa();
			System.out.println("La cadena fue aceptada");
		
			tablaSimbolos.put(1, new Identificador("Nombre", "Valor", "tipoDato", "tipo","uso","modificador"));
		}
		catch(ParseException e)
		{
		  
			System.out.println(e.getMessage());
			//system.out.println("Se han encontrado errores, fall� al compilar");
		}
	}
}
PARSER_END(lexer)
/* Ignorados */
SKIP: {" " | "\t" | "\r" | "\n" }

/* Palabras Reservadas */
TOKEN :
{
< MODIFICADOR: "private" | "public" | "protected" >
| < CLASS: "class" >
| < TIPODATO: "boolean" | "int" | "double" | "string" >
| < IF: "if" >
| < ELSE: "else" >
| < ELSEIF: "else if" >
| < WHILE: "while" >
}

/* Separadores */
TOKEN :
{
  < PARENTESISIZQUIERDO: "(" >
| < PARENTESISDERECHO: ")" >
| < LLAVEIZQUIERDA: "{" >
| < LLAVEDERECHA: "}" >
| < PUNTOYCOMA: ";" >
| < COMILLASDOBLES: "\""> 
}


/* Operadores */
TOKEN :
{
  < ASIGNACION: "=" >
| < EXPRESION: ">" | "<" | "==" | "<=" | ">=" | "!=" >
| < MAS: "+" >
| < MENOS: "-" >
}

/* Literales */
TOKEN:
{
<INTEGER_LITERAL: ["1"-"9"] (["0"-"9"])* >
|<BOOLEAN_LITERAL: "false" | "true" >
|<DOUBLE_LITERAL : (["0"-"9"])+["."](["0"-"9"])+>
|<STRING_LITERAL: <COMILLASDOBLES>(~["\n","\r"])*<COMILLASDOBLES>>
}

/* Identificador */
TOKEN:
{
	< IDENTIFICADOR:(["a"-"z","_"])* >
}

/*===== Operadores Logicos  ======*/


void programa():{}{
	try{
		<MODIFICADOR> <CLASS> <IDENTIFICADOR> <LLAVEIZQUIERDA> (LOOKAHEAD(3)sentencia())* <LLAVEDERECHA>
	}catch(ParseException e){
		System.out.println("Error de Sintaxis");
		System.out.println(e.toString());
	}
	
}
/*M�todos para field_declaration*/
void field_declaration():{}{
	variable_declaration()
}

void variable_declaration():{
	Token modificador;
	Token tipo;
  }{
	modificador=<MODIFICADOR> tipo=type() variable_declarator()<PUNTOYCOMA>
	{
	  System.out.print(tipo.image+ " ");
	  System.out.print(modificador.image+ " ");
	  System.out.println("*************");
	  }
	  
}

Token type():{
	Token tipo;
  }{
	tipo=<TIPODATO>
	{
	  return tipo;
	}
}



void variable_declarator():{}{
  {
  Token identificador;
  Token valor;
  } 
	identificador=<IDENTIFICADOR> <ASIGNACION> (valor=<INTEGER_LITERAL> | valor=<BOOLEAN_LITERAL> | valor=<DOUBLE_LITERAL> | valor=<STRING_LITERAL>)
	{
	  System.out.print(identificador.image + " ");
	  System.out.print(valor.image + " ");
	}
}	

/*Metodos para sentencia*/
void sentencia():{}{
	variable_declaration()|if_todo()|while_sentencia()
}

void if_todo(): { } {
	<IF>if_sentencia()(else_if_sentencia())* [else_sentencia()]
}

void if_sentencia():{}{
	<PARENTESISIZQUIERDO>expression()<PARENTESISDERECHO> <LLAVEIZQUIERDA> (sentencia())* <LLAVEDERECHA>
}

void else_sentencia():{}{
	<ELSE><LLAVEIZQUIERDA> (sentencia())* <LLAVEDERECHA>
}
void else_if_sentencia():{}{
	<ELSEIF>if_sentencia()
}

void while_sentencia():{}{
	<WHILE><PARENTESISIZQUIERDO> expression() <PARENTESISDERECHO><LLAVEIZQUIERDA>(sentencia())*<LLAVEDERECHA>
}

void expression():{}{
	testing_expression()
}

void testing_expression():{}{
	(<INTEGER_LITERAL> | <IDENTIFICADOR>) <EXPRESION> (<INTEGER_LITERAL> | <IDENTIFICADOR>)
}

